// Code generated by go-bindata.
// sources:
// tmpl/monitor.tmpl
// tmpl/screenboard.tmpl
// tmpl/timeboard.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\xe2\x30\x10\xc6\xef\x79\x8a\x51\xce\xbb\x3c\x41\x39\xac\x5a\x56\xe5\xb0\xa0\xad\x90\x7a\x58\xad\x2c\x2b\x1e\x88\xd5\x60\x53\xc7\x21\x42\x5e\xbf\xfb\xca\xff\x20\x4e\x4d\xcb\x29\xfe\xbe\x6f\x7e\x99\x4c\x26\x28\xec\xe5\xa0\x1a\x84\x9a\x51\x4d\x99\x3c\x90\xa3\x14\x5c\x4b\x55\x43\xcd\x18\x31\x06\x16\x6b\x06\xd6\xd6\x60\x2a\x00\x41\x8f\x08\xf9\x6f\x09\xb5\x0b\x6d\x9c\x63\x6d\x5d\x01\xe8\xcb\xe9\x4e\x68\xe7\x9c\x10\x32\xe6\x3b\xf0\x3d\x2c\x76\xf4\xd0\x83\xb5\xae\xcc\x5d\xcd\xcb\xfe\x18\xa3\xa8\x38\x60\x08\x5a\x5b\x1b\xb3\xb0\xb6\xfe\x66\x0c\x0a\x66\xed\xdf\x48\x42\xc1\x02\xe4\x88\x7d\x4f\x0f\x98\x43\x1e\x1e\x56\xdb\x5d\xe5\x1a\xf8\x15\x6d\x6b\x2b\x27\x01\x60\xdf\xd0\x8e\x6a\x2e\x05\x49\xa5\xd3\xfc\xf6\xe4\xac\x7e\xb1\xba\xc6\x66\x84\x0a\xe0\x7d\x40\x75\x81\x25\xb8\xfc\x6f\x7f\xfd\xcf\x63\x4f\xf8\xd8\x52\x45\x1b\x8d\xca\x3f\x61\x6c\x75\xe4\xba\xbd\x82\x43\xd3\x69\x16\x1b\xa9\xf9\xfe\xb2\x91\x4f\x54\xd3\xe0\x08\xaf\x10\x21\x89\x7b\x3b\xe1\x69\xfc\xb4\x3f\x24\xb3\x29\x24\xe0\x0b\x06\xc0\x5a\x68\x54\x67\xda\x05\x57\x45\x95\xf0\x24\x07\x68\x39\x5d\x04\x87\xfb\xff\x18\x18\xd7\x59\xa3\xd4\x2b\xd3\x1e\x27\x99\x22\x69\xc7\x8f\x28\x07\xfd\x1c\x77\x20\x9c\x48\x1b\x19\xb9\x5b\x04\xac\x45\xd3\x0d\x0c\x6f\x7b\xc4\x83\x40\xfc\x3e\x05\xcc\x34\xf3\xe9\xb8\xde\x07\xae\xf0\xe7\xd0\x75\xaf\x5c\x30\x39\xa6\x79\x79\x99\xec\x87\xae\x23\x63\x30\xd2\xc4\x8a\x05\xe5\x91\xe1\xf8\x2c\x7b\xfd\x84\x1d\xbd\xc4\x99\xe1\x48\x5a\xd9\x6b\xc2\xbc\x16\xa7\xf6\x21\x56\xa4\xad\xce\xb4\x1b\xfc\x42\x4e\x92\x78\x15\x33\x64\x31\x3b\xa1\x4e\xdf\x46\xab\xb0\x6f\x65\xc7\x26\x9b\x19\x16\x76\xee\xe8\xdb\x79\xe9\xff\x1a\x6e\x90\xed\x5b\x88\x00\xc8\xb7\xd8\xc2\x4d\xca\x9e\xe6\x56\xf3\x4a\x95\xe0\xe2\x90\xe4\x31\x1e\x43\xf5\xcc\xfc\x1c\xf1\x82\x8d\x3c\xbb\xaf\x30\x47\x11\x95\xf4\x8c\x39\x4f\xdf\x61\x3f\x2a\xae\x79\x93\x3e\x09\x80\x26\x9d\x03\x6c\x6e\x7f\x41\x99\xdf\x34\xd1\xe6\x3d\xde\xcb\x67\xf8\xe2\x8a\x94\x0e\x95\xad\xfe\x07\x00\x00\xff\xff\x41\xd6\x1b\xf0\xed\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1517, mode: os.FileMode(420), modTime: time.Unix(1599283620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5b\x6f\x23\x2b\x12\x7e\xcf\xaf\x40\x79\xda\x23\xed\x64\x7e\xc1\x3c\xcc\x24\x93\x73\x46\x4a\x72\xb2\x71\x4e\xce\x5e\xb4\x6a\x91\xee\x72\x1b\x85\x6e\x3c\x40\x3b\x76\xbc\xfe\xef\x2b\xa0\xb9\xb5\xb1\x0d\xd6\x4a\x9b\x17\xa7\x2e\x7c\x55\xdc\x8a\xa2\x68\x0e\x82\x0d\xbc\x06\x74\xd9\x60\x89\x1b\xd6\x56\xa2\xe6\x00\xfd\x2b\xc3\xbc\xb9\x44\x97\x4d\x53\x6d\xb7\xe8\xea\x47\x83\x76\xbb\x4b\xb4\xbd\x40\x48\x12\x49\x01\x7d\x41\x97\x8a\xff\xac\x89\xdd\xee\xf2\x02\xa1\xed\xf6\x13\x22\x73\xf4\x97\x07\x26\xff\x09\x9c\xa1\xab\x27\xc0\xcd\xef\x3d\xdd\xfc\x82\x76\xbb\x0b\x84\x38\xe0\xa6\x62\x3d\xdd\xa0\x2f\x48\xb5\xb5\x62\x23\x55\xad\xa1\x6f\x3c\x11\x41\xcd\x16\x98\x43\x33\x02\x09\x4d\x8c\x28\x46\x92\x83\xf1\x0c\xdd\x92\x62\x09\x2f\x98\x13\xfc\x4a\x41\xfc\xe2\x15\xdf\x89\x5c\x24\x34\xbc\x02\xc7\x7d\x0b\xe8\xca\x30\xe4\xa8\x57\xad\x46\x45\x3d\x30\x08\xf5\xb8\x03\xf5\x3b\x0e\xce\x83\x22\xcd\xd8\x20\xb4\xe4\x30\x27\x6b\x27\x7b\x34\xa4\x95\x36\x30\xc7\x03\x95\x56\x7a\x33\x92\x46\x9c\xec\x5a\x8a\x88\x3a\xf3\x27\x69\x5a\x90\x87\xba\xf0\xae\xa5\xa3\xdf\x72\xb3\xf4\x33\xaa\xfe\xb7\x6e\xad\x2d\xf7\xef\x8e\xb5\xb1\xac\x7f\x38\xd6\xfe\x48\xab\x55\x31\x8e\x6e\x6a\xc1\x3c\xc3\x5a\x46\xad\x5d\x67\x0e\x81\x7d\xa5\xa4\xed\x63\xc4\x0a\x2b\x5e\x84\xab\xb5\xca\x80\x67\xe4\x63\xe2\x69\x25\xc8\x47\xec\xae\xd2\xc9\x46\xfd\x0d\x48\xbb\x90\x0e\x72\xa1\x49\x0b\x67\x84\xd9\x58\x7f\x92\x46\x2e\x1c\xd4\xbb\xa2\x2c\x92\x16\xe5\x77\x15\xd6\xde\x25\xa9\x46\xdf\xf6\xaf\x64\x26\xae\x19\x65\xdc\xc1\xd4\x8a\xb2\x38\x5a\x54\x30\xf2\x9d\x1f\xf4\x60\xfb\x11\xbd\x5f\xc6\xa9\xe8\xd4\x24\x98\xf5\x89\x10\x25\x2b\xa8\xc4\x12\xbb\xf9\xbe\x23\x2b\x98\x29\xda\xda\xdc\x1d\xb2\x7c\xdc\x11\x0a\x37\x30\x4f\xfa\xa2\x25\xde\x1d\x0a\x55\x03\x73\xe7\xd0\x1e\xd4\x0b\xf9\x70\x30\x08\xad\xc8\x87\xf5\xf4\x85\x7c\x38\x27\xf7\x3c\x4a\x8d\xf2\x20\x24\xeb\xfe\xe8\x89\x0c\xf0\x6a\xcd\xac\x86\x9e\xb8\xa9\xf3\x7a\x45\xf0\x5f\x07\xc9\x44\x8d\x83\xfd\x89\x10\xb6\xbc\x31\xa6\x3a\x9d\x18\xe7\x38\xb0\x5a\x4a\xf1\x36\x35\x4b\x6d\xb2\x4f\xad\x56\x91\xd3\x33\xb9\x89\x1c\xf6\xf3\xa4\x25\x5e\x20\x34\xe9\xd7\x4d\x02\xeb\x11\x53\x90\x32\x44\x43\x68\x69\x78\x2e\x38\x8f\xa4\x77\x31\xe1\xe4\x61\xe8\x5b\x4a\x96\x29\xf8\x6a\x4e\xc9\x72\x1c\xe2\x40\x75\x0a\x79\xca\xca\x2d\xa1\xf4\x9e\xf4\x91\x85\x39\xa1\xb4\xea\x88\x1b\xe6\x51\xa7\xb8\x07\xba\x1d\x5e\x27\xb0\xf1\x3a\xc2\xc6\xeb\xe3\xd8\x3b\xf4\xf9\xb3\x9e\x8c\x63\x73\x7c\x7c\xd2\x9f\xe0\xe7\x00\x42\x8a\xe4\xbc\x5b\x61\x2c\x8b\x8e\x38\xf5\xc7\x8d\xda\xb1\xf5\xf0\xb7\x01\xf8\x26\xea\xf0\x4f\xdb\x53\x2d\x2a\x1e\x43\x75\x82\x46\x78\x07\x8f\xd7\x5c\x44\xed\xc7\x1e\xec\x4f\xc5\xad\x42\x70\xa7\x57\x6c\xe1\x1e\x24\x27\x75\x04\xdf\x69\x96\x85\x36\x0a\xe5\x63\x01\x6b\x79\x4b\xa8\x04\x1e\x8f\x88\x8a\x0b\x73\xcd\x0f\x03\x83\xd1\x2c\x36\x72\x47\xba\x28\x58\xaa\xe3\xa2\xf3\x81\x52\x8b\x8b\x41\xbf\xb6\x2d\x87\x16\x4b\x16\x7b\x8e\x1d\xdb\xc2\x7b\xc5\x62\x1b\xd7\xac\x5b\x62\x0e\xcf\x2c\x32\x51\x1b\x6e\x25\x99\x3f\x5d\x47\xbd\x72\x0b\x0b\xb5\x23\xf6\x96\x4e\xad\xd9\xd1\xda\xf1\x9a\xc5\x46\x7e\xe7\x0d\xf0\x6f\xf1\x1e\x62\x8a\x57\xbd\xba\x6c\x71\xd4\x39\x0f\xfb\x86\xf0\x04\x78\x43\x78\x84\x7e\x43\xca\x67\xe0\xfb\x5a\x72\x7c\xcd\x68\x04\x0f\x8a\x59\xd5\x8c\x5a\x78\xab\x55\x0c\xff\xa3\xaf\x39\x60\x01\xbf\x32\xd6\x44\x26\xc8\x28\xa8\x5a\xc6\x1a\x6b\x26\xd4\x3e\x63\x2d\xf5\x0d\x91\x84\xf5\x98\xde\x32\xde\xe1\x28\x6e\x86\x91\x73\x5f\x11\x7d\x9a\x28\xee\x85\x51\xb5\x28\x5d\xab\x6a\xae\x9b\x05\x31\xf5\x64\xae\x68\x31\x0e\x66\x8c\x07\xfb\x99\x79\x80\x67\x1d\xe1\xb9\x06\xcc\x76\xdb\xdb\xfa\x76\x67\x86\x9b\xdf\xab\x9e\x65\xe9\x47\xbf\x02\x2e\x27\x56\x88\x66\xfa\x45\xa1\xa9\x73\xd0\x5f\x30\x1d\xa6\xc3\xb4\x52\x3c\x97\x9a\x6a\xe2\x2c\xc7\x3b\xdc\xc2\x1f\x4f\x77\x53\xd7\x15\xbb\x1a\xb8\xdb\x39\x56\xef\xb4\x91\x93\x39\x50\x1e\xeb\x68\xda\x78\x24\x71\x4c\xa5\x8e\xff\x8f\xb5\xb7\x17\xaa\x4f\xa4\x0f\xb9\xb8\xf1\x55\xd2\xfc\x1d\xb9\x50\x1e\x9e\xa6\x49\x5e\x77\xf6\xdc\x3c\xe3\xd6\x1c\xf7\x71\x9c\x92\xb8\x1d\x13\x03\x81\xbe\xa0\x7f\x6d\xb7\x63\x2c\xf2\xea\xbb\xdd\xe5\x76\x7b\xb5\xdb\x5d\xfe\x75\xbb\x85\xbe\xd9\xed\xfe\x7d\x3c\x0b\x1d\x53\xc0\xa2\x3c\x34\x95\x98\x5e\x7d\x5f\x41\x1f\x05\x4b\xbf\x98\x92\xa2\xbd\x28\x0a\x4a\x2b\x58\x5f\x07\xf3\x4c\xe5\xb6\x56\x9e\xb8\xf4\x69\xcf\xc9\x34\xe7\x50\x46\x7d\x8f\xf9\x5b\x3c\xe0\xbe\x0b\xa3\xec\x44\x3e\xdd\x69\xad\x63\xe9\xf4\xff\x3e\xfb\xbd\xc3\xaf\x10\x1f\xd0\x54\x71\x5c\x7a\xa7\x89\x52\xd0\xfd\xd8\x78\x22\x32\x26\xd7\x56\x6a\x92\xb2\x57\x96\x02\xb0\x75\x85\x8b\x84\x3c\xa7\xa8\x13\x97\xaf\x54\x56\x1d\x55\xaf\x46\x8d\xec\xc2\x4c\x54\x75\x08\x8b\x0d\x51\x99\xe1\x14\xca\x23\x87\x9a\x08\xc2\xfc\x15\x75\x69\x39\xf6\xf6\xeb\xe8\x82\xbe\x4e\x6a\x80\x19\xa5\x85\x53\xa8\xb7\xac\x8f\x47\x70\xce\xfa\x78\x04\xad\x46\x36\xe4\x57\x0a\x5c\xfe\xb8\x71\x88\x58\xd1\x15\x71\x39\xde\x28\xcf\xc7\x1b\x24\x7b\x82\x39\x07\xe1\xa3\x37\x1e\x24\xab\xb8\x61\x3a\x5c\xaf\x97\x8d\x7d\x07\x2d\xf4\x3e\x2f\xa5\x9a\x74\xdb\xca\x50\x65\x58\xd1\x60\x1a\xbc\x68\x38\xbd\x56\x36\x70\x7c\x3d\xd7\x77\xde\x74\xd8\x3c\xb9\xb6\x83\x6c\x25\xc8\x50\xc2\xe4\xe4\x14\xc4\xf5\x02\xea\x37\x5f\x00\x55\x94\xbf\x3e\x29\x22\x17\xe8\x57\xce\x86\x25\xe9\x5b\x87\xd5\x8e\x0c\x0b\x67\x15\xca\x10\x63\xb8\x08\xab\xa0\x36\x5b\xbf\x3d\x32\x11\xd4\xc4\xeb\xb7\x6a\xc9\x84\xaf\x88\x6b\x79\x11\xde\xf7\xa6\x85\x18\x10\x9a\x16\x42\x44\xa5\x91\x5f\x62\x7f\xbe\xf7\x53\xb9\x90\x9d\x9b\x4b\x25\x40\xff\x41\x20\x6a\xbc\x84\x07\x78\xa7\xa4\x87\x32\x4f\x23\x2f\x43\x07\xb3\x51\xbe\xb5\x75\x74\xf5\x79\x6d\xa3\x6b\xcf\x28\xce\x86\xd3\x99\x45\xb4\xad\xf4\x99\x13\xed\x2a\xa7\x93\x8d\x3a\x23\x1f\xe1\xea\x13\x9a\xb4\x70\x46\x98\x8d\x75\x8f\x79\x1b\x54\x23\x3b\x4d\xba\xb2\x91\xa1\xb2\x7b\xdb\xaf\x7c\x3f\xfb\x95\xeb\x60\xbf\xca\xef\x1a\xf0\x15\xa9\x61\xfc\xf1\x5d\x34\x74\x35\xfe\xba\xbe\x46\xda\xa5\x46\x1e\x70\xb7\x6f\x41\x3f\x02\xc6\xf0\xd1\x43\x60\xc6\xdc\xc0\x0b\xf0\xe8\xfc\x54\xb3\x5d\xad\x0c\x33\x98\x26\xab\x97\x1f\xa5\xf1\x86\x0d\x72\x8a\x4e\x35\x77\x8a\x1f\xe9\xe6\xaf\x86\x41\xc8\xd9\x82\xbd\xff\x46\x82\x02\x44\x37\x08\x59\x89\x05\x7b\xaf\x16\x44\xba\x48\x12\xaa\x16\xe3\x7f\xe7\x9c\xf1\x94\x05\xd0\x82\xa9\x0d\xa3\x5e\x6c\xe5\x0e\x4b\xe8\xeb\x4d\xc2\x0c\x35\x92\xa9\x9d\xb1\x41\xb1\xa1\x6f\x1c\xf0\x5b\xc3\xde\xfb\x84\xa9\x57\x2b\x9b\x1a\x73\x8d\x8a\xcd\xdd\x10\x21\x39\x79\x1d\x64\xb8\x0c\xbc\xc5\x26\x10\x4f\x8d\x86\x4d\x8b\xed\x3e\x8d\x5f\x1b\xdc\x11\x21\x13\x76\xed\xc7\x08\x15\x25\x42\x4e\x0d\x87\x6d\xb3\x0d\xdf\x10\xb1\xa4\x78\x63\x0a\x5d\xce\x62\x63\xb8\xb6\x90\x65\x1f\xdd\x43\xdd\xb2\x47\xd1\x47\x0e\x73\xe0\xd0\x07\x01\x47\x87\xf9\x6a\xe9\x04\x51\xdd\xcb\xeb\xe7\x1f\x7a\xa4\x01\xf5\xdf\x35\x1b\xfa\x60\x6b\x2d\x48\x03\xd5\x07\x70\x56\xd5\x5a\xe0\x8e\xc2\x48\xbd\x20\x98\xf7\xb8\x85\x99\xc4\x72\x10\x6a\xd0\xe3\x97\xfc\x4e\x4b\x2b\xa1\xc5\x66\xca\xa2\xc7\xfd\x64\xeb\xb3\x6c\xbb\xcf\x04\x0e\xd8\x36\x2f\xf5\xe1\x4b\x76\xb2\xf5\xf9\xb6\xa3\x23\x37\x65\x3b\x3c\x80\x93\xad\xcf\xb7\x1d\x5f\x74\x52\xc6\xa3\x7b\x4f\xba\x7d\xfe\x6d\x0d\x73\xdc\x89\xc4\x13\xb8\x11\xb8\x2b\x9c\xa1\xbe\x1c\x7e\x01\x9f\xb1\xa8\x94\x29\x98\x2f\x62\x2a\x51\xd1\x83\x6f\x34\xf5\x47\x3e\x59\xc8\xc1\xd2\x5b\x20\x7c\x4b\x57\xb4\xdf\x8e\x8a\x28\x7b\x8b\xc6\x71\x3f\x15\xed\x3a\xaa\x89\x83\x70\x07\x2f\xbb\x27\x22\xcc\xd0\xf5\x22\x8c\x2c\x8a\x1e\xaf\xd2\xa3\xd4\xa5\xbd\xd7\x0b\xcc\x71\x2d\x83\x52\xce\xc9\xa4\x80\xb5\x02\x7c\x8f\xa8\x26\x5d\x16\x60\xa8\xe4\x62\xda\xa1\xcf\x9f\xcd\x77\x44\x47\xbe\x49\xda\x5d\xfc\x37\x00\x00\xff\xff\xd7\x09\x1b\xd1\x63\x26\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 9827, mode: os.FileMode(420), modTime: time.Unix(1599295121, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xc9\x6e\xdb\x3c\x10\xbe\xfb\x29\x06\x42\x0e\xff\x0f\xc4\x7e\x80\x02\x3e\xa4\x09\x1c\x14\xe8\x92\x26\x41\x7a\x28\x0a\x81\x96\x46\x0a\x51\x6a\x09\x45\x25\x71\x08\xbe\x7b\xc1\xe1\x26\xdb\x8a\x7b\xa8\x4f\x9c\xf9\xbe\x59\x39\x43\x4b\xe2\xd0\x8d\xb2\x40\xc8\x4a\xa6\x58\xd9\xd5\xb9\xe2\x0d\x6e\x3b\x26\xcb\x0c\xb2\xb2\xcc\xb5\x86\xd5\xa7\x12\x8c\xc9\x40\x2f\x00\x14\x57\x02\xc1\xfd\xd6\x90\x59\xf4\x9e\x54\xc6\x64\x0b\x80\x12\x87\x42\xf2\x5e\xf1\xae\x0d\xf0\xd5\x44\xe5\x48\x12\x59\x99\x77\xad\xd8\x91\x0f\xcb\xb9\x45\x56\x7e\xb3\x8a\xa5\x31\x0b\x00\xad\x5f\xb8\x7a\x84\xd5\xb5\x64\xfd\xe3\x10\x95\x92\xb5\x35\xc2\x0a\x48\xac\x2d\x46\x29\x85\xa4\x66\xd2\x49\xae\xae\xb0\xe2\x2d\xa7\x24\x9c\x3b\x80\x67\xfe\x96\x8a\x78\xe0\x6f\x16\x08\x46\x4b\xe0\x15\xac\x2e\x46\xd5\x0d\x05\x13\x68\x21\x16\x05\x6f\x92\x50\x63\x32\x6b\x82\x6d\xe9\x5d\x07\x07\x37\x12\x0b\x3e\xf8\xa0\x7d\x14\xbc\x83\x84\xbe\xeb\xe0\x5a\x76\x63\x4f\x1d\xa8\xed\x09\xd6\xf0\x53\xeb\xb3\xda\x69\x3f\xac\x03\xc1\x98\xd0\x9d\x33\xde\x96\xf8\x7a\x0e\x67\x28\xb0\x39\x60\xf0\xca\xc3\xc6\x9c\x6b\x4d\xc1\x32\xad\x89\x49\x27\xd2\xfc\x9a\x4f\xe4\xae\xe8\x7a\xa4\x44\x06\x7b\xf2\x89\x0c\x4e\x6b\xc3\x38\xc2\xa9\x44\x12\xe3\x9f\x12\x51\x3b\x77\x1f\xa4\x1d\x48\x5a\xfb\x39\x00\xe8\x99\x40\xa5\x70\x6f\x3e\xc9\x62\x75\xe3\x91\x70\xc7\x91\x9b\x57\x82\xf7\xb3\xdc\x8d\x05\x02\xdf\xcc\xa7\xf3\x85\xc9\xdf\x28\xa9\x31\x56\xe5\x86\x6d\x4f\xe9\xa7\xd6\xdb\x35\x04\xc5\x7c\xd5\xae\xc7\xb4\x48\x56\x48\xf9\x3d\x33\x31\xc6\x61\x7b\x20\x21\x81\x5a\x53\xf8\xcf\x6c\x8b\xc2\xc6\x11\x74\xf0\x64\xa7\x3d\x1a\xaa\x54\xc2\xf1\x21\x16\xe5\x2a\xb8\xc5\xa7\x11\x07\x35\x5b\x82\x74\x58\xac\xe1\x69\xd2\xeb\xef\x23\xca\x5d\x5a\xa4\x98\x27\x95\xb6\x34\x86\xea\x3d\x28\x57\x6b\x9b\x02\x78\xef\xd1\xe4\xa2\xae\x25\xd6\x4c\x75\xd2\x25\x61\x95\x2d\x42\x96\xc1\x7f\x57\x78\x8b\xd5\x9d\x92\xbc\xad\xa7\xbc\xff\x69\x4d\x93\x59\xd8\xd3\xa4\x89\xd1\xc8\xa1\x8d\xba\x3c\x0c\x1b\xe7\x4b\x6b\xdf\x0b\xa7\x89\xbc\xc3\x91\xb3\x96\xb4\xeb\x7e\xc0\xec\xa6\xfb\x63\xd8\xf3\x34\x7a\xfb\xfd\x4e\xc6\x3f\x78\xa9\x1e\xad\xe9\x0b\x1d\xbc\xa1\xd3\x9e\x30\x3b\xdd\xd6\x7d\x9b\x49\x9d\xbe\xf0\xd0\x8a\x08\xb8\x91\xbe\xec\xda\x92\x5e\x4a\x26\x36\x9d\x6c\x98\x1a\x60\x3a\xdc\xef\xc2\xe1\x79\x4e\x2d\x2d\x12\x35\xaf\x88\xbb\xd7\x35\x98\xb6\xed\x74\xd7\xf6\x27\xc4\x7a\x6e\x7a\x26\xa7\xb7\x7c\x99\x34\x69\xfa\x52\x51\x61\x7f\xe6\x97\xea\x38\x40\x6c\xc6\x38\xa8\xae\xf9\x58\x5f\x76\x82\x3c\x17\x24\xe7\xdb\x3a\x2f\x48\x13\xa2\x1f\xd0\xfe\xea\x71\x73\xe8\xb1\x9a\xf5\xb8\x79\xdf\xe3\xf4\xda\x1c\x30\x77\x5a\x24\xea\xf1\xae\xcf\x4b\xc6\x3f\xc0\x53\x5d\xba\xfe\x7b\x6c\x7a\xc1\x14\x3e\x30\xc9\xd9\x56\x60\x7c\xfa\x26\xff\xce\xf6\x3b\xc1\xd3\xf2\x67\xcf\xf3\x37\xdf\xb2\x06\x27\xef\xc5\x57\x2b\x86\xfb\xea\x25\x56\xfc\x15\x26\x7f\x8f\x56\x0c\x68\x89\x15\x1b\x85\x4a\x9f\x15\x4e\x74\xf0\x71\xce\x66\xf1\x27\x00\x00\xff\xff\x85\x76\x0d\xbc\xdb\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2267, mode: os.FileMode(420), modTime: time.Unix(1599283620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl": tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl": tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl": &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl": &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

